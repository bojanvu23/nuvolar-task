name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Docker image settings
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for SonarQube to work properly
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # SonarQube analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}
        # with:
        #   args: >
        #     -Dsonar.projectKey=your-project-key
        #     -Dsonar.sources=src
        #     -Dsonar.tests=test
        #     -Dsonar.coverage.exclusions=**/*Test.java
        #     -Dsonar.java.binaries=target/classes

      # Run unit tests
      - name: Run Unit Tests
        run: |
          # mvn test

  quality-check:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarQube to work properly

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # SonarQube analysis
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}
        # with:
        #   args: >
        #     -Dsonar.projectKey=your-project-key
        #     -Dsonar.sources=src
        #     -Dsonar.tests=test
        #     -Dsonar.coverage.exclusions=**/*Test.java
        #     -Dsonar.java.binaries=target/classes

  test:
    if: github.event_name == 'push'
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Run unit tests
      - name: Run Unit Tests
        run: |
          # mvn test

  build:
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build application
      - name: Build Application
        run: |
          # mvn clean package -DskipTests
  docker-build:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Login to container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.ref_name }}-${{ github.sha }},enable={{is_default_branch}}
            type=raw,value=${{ github.ref_name }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Example Dockerfile path if not in root
          # file: ./path/to/Dockerfile

 #################################################################
 ##################Deployment#####################################

  # Update Repository used by ArgoCD for GitOps
  deploy:
    if: github.event_name == 'push'
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Update image tag in values.yaml 
      - name: Update image tag in values.yaml
        run: |
          sed -i "s/tag: .*/tag: ${{ github.sha }}/" helm/api-gateway/values.yaml

      # Commit and push updated values.yaml
      - name: Commit and push updated values.yaml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add helm/api-gateway/values.yaml
          git commit -m "Update image tag to ${{ github.sha }}"
          git push

